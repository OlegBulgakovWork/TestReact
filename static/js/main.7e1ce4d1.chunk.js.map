{"version":3,"sources":["shared/Dropdown.js","components/inputCard/InputCard.js","components/outputCard/Table/Table.js","components/outputCard/OutputCard.js","components/mainCard/Card.js","App.js","serviceWorker.js","index.js"],"names":["CustomDropdown","name","setGender","menu","onClick","key","style","minWidth","Item","overlay","placement","textAlign","InputCard","setName","setAge","setEmail","setCountry","setCity","setUploadedFile","uploadedFile","setDate","date","TextArea","setActiveKey","Input","useState","showContent","setShowContent","className","placeholder","maxWidth","onChange","e","target","value","min","max","onFileLoaded","data","fileInfo","width","moment","format","rows","disabled","CustomTable","columns","title","dataIndex","render","text","curtainData","splice","map","elem","price","size","dataSource","OutputCard","gender","age","email","country","city","console","log","mData","Product","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","Card","TabPane","Tabs","defaultActiveKey","tab","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e1ce4d1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Menu, Dropdown, message,Button } from \"antd\";\r\n\r\nconst CustomDropdown = ({name,setGender}) => {\r\n  const onClick = ({ key }) => {\r\n    setGender(key)\r\n  };\r\n\r\n  const menu = (\r\n    <Menu onClick={onClick} style={{ minWidth: 170 }}>\r\n      <Menu.Item key=\"Male\">Male</Menu.Item>\r\n      <Menu.Item key=\"Female\">Female</Menu.Item>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <Dropdown overlay={menu} placement=\"bottomLeft\" style={{minWidth:170}} >\r\n      <Button style={{ minWidth: 170, textAlign:'left' }}>{name}</Button>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default CustomDropdown;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport CSVReader from 'react-csv-reader'\r\nimport CustomDropdown from \"../../shared/Dropdown\";\r\nimport moment from 'moment';\r\nimport { Input, Button,InputNumber  } from \"antd\";\r\nimport './style.css'\r\n\r\nconst InputCard = ({\r\n    setName,\r\n    setGender,\r\n    setAge,\r\n    setEmail,\r\n    setCountry,\r\n    setCity,\r\n    setUploadedFile,\r\n    uploadedFile,\r\n    setDate,\r\n    date,\r\n    setActiveKey\r\n}) => {\r\n  const { TextArea } = Input;\r\n  const [showContent,setShowContent]=useState('')\r\n  \r\n  return (\r\n    <div>\r\n      User:\r\n      <div className=\"row\">\r\n        <Input placeholder=\"Name\" style={{ maxWidth: 170 }} onChange={e=>setName(e.target.value)} />\r\n        <InputNumber min={0} max={120} placeholder='Age' style={{ minWidth: 170 }} onChange={value=>setAge(value)} />\r\n        <CustomDropdown name=\"Gender\" setGender={setGender} style={{ minWidth: 170 }} />\r\n      </div>\r\n      <div className=\"row\">\r\n        <Input placeholder=\"Email\" style={{ maxWidth: 170 }} onChange={e=>setEmail(e.target.value)}/>\r\n        <Input placeholder=\"Country\" style={{ maxWidth: 170 }} onChange={e=>setCountry(e.target.value)}/>\r\n        <Input placeholder=\"City\" style={{ maxWidth: 170 }} onChange={e=>setCity(e.target.value)} />\r\n      </div>\r\n      Data:\r\n      <div className=\"row\">\r\n        {/* <Uploader onChange={e=>setUploadedFile(e.target.value)}/> */}\r\n        <CSVReader onFileLoaded={(data, fileInfo) => {setUploadedFile(data) } }/>\r\n        <Button onClick={()=>setShowContent(uploadedFile)}>Upload</Button>\r\n        <Button name=\"Date\" style={{ width: 170 }} onClick={()=>setDate(moment().format('MMMM Do YYYY'))}>{date?date:'Date'}</Button>\r\n      </div>\r\n      \r\n      <TextArea rows={4} value={showContent} disabled/>\r\n      <Button >Continue</Button>\r\n    </div>\r\n  );\r\n};\r\nexport default InputCard;\r\n","import React from \"react\";\r\nimport { Table } from 'antd';\r\nconst CustomTable=({data})=>{\r\nconst columns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    render: text => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: 'Price',\r\n    dataIndex: 'price',\r\n    key: 'price',\r\n  }\r\n];\r\nconst curtainData = data.splice(1).map(elem=>{return{key: elem[0],name:elem[0],price:elem[1]}})\r\n\r\n  return(<Table size='small' columns={columns} dataSource={curtainData} style={{maxWidth: 'fit-content'}}/>)\r\n \r\n  }\r\n  export default CustomTable;","import React from \"react\";\r\nimport CustomTable from './Table/Table'\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst OutputCard = ({\r\n  name,\r\n  gender,\r\n  age,\r\n  email,\r\n  country,\r\n  city,\r\n  uploadedFile,\r\n  date,\r\n}) => {\r\n  console.log(uploadedFile);\r\n  const mData = uploadedFile.splice(1).map((elem) => {\r\n    return { name: elem[0], Product: elem[1] };\r\n  });\r\n  return (\r\n    <div>\r\n      <div className=\"info\">\r\n        {name}, {gender}, {age}, <br/>\r\n        {country}, {city}, {email}\r\n      </div>\r\n      <span>{date}</span>\r\n      <div className='visualInfo'>\r\n      <CustomTable data={uploadedFile}/>\r\n      <BarChart\r\n        width={300}\r\n        height={300}\r\n        data={mData}\r\n        margin={{\r\n          top: 5,\r\n          right: 30,\r\n          left: 20,\r\n          bottom: 5,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"1 1\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"Product\" fill=\"#8884d8\" />\r\n      </BarChart>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default OutputCard;\r\n","import React, { useState } from \"react\";\r\nimport { Tabs } from \"antd\";\r\nimport InputCard from \"../inputCard/InputCard\";\r\nimport OutputCard from \"../outputCard/OutputCard\";\r\n\r\n\r\nconst Card = () => {\r\n  const { TabPane } = Tabs;\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [gender, setGender] = useState(\"\");\r\n  const [age, setAge] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [uploadedFile, setUploadedFile] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n\r\n  return (\r\n    <Tabs defaultActiveKey=\"1\">\r\n      <TabPane tab=\"Input\" key=\"1\">\r\n        <InputCard\r\n          setName={setName}\r\n          setGender={setGender}\r\n          setAge={setAge}\r\n          setEmail={setEmail}\r\n          setCountry={setCountry}\r\n          setCity={setCity}\r\n          setUploadedFile={setUploadedFile}\r\n          uploadedFile={uploadedFile}\r\n          setDate={setDate}\r\n          date={date}\r\n        />\r\n      </TabPane>\r\n      <TabPane tab=\"Output\" key=\"2\">\r\n      <OutputCard\r\n          name={name}\r\n          gender={gender}\r\n          age={age}\r\n          email={email}\r\n          country={country}\r\n          city={city}\r\n          uploadedFile={uploadedFile}\r\n          date={date}\r\n        style={{maxWidth:900}}/>\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport Card from './components/mainCard/Card';\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <header className='header'>\n    <Card/>\n    </header>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}